---
export interface Props {
  poem: any;
  isPermalink?: boolean;
}

const { poem, isPermalink = false } = Astro.props;
const { Content } = await poem.render();

// Utility function to adjust color luminance
function adjustLuminance(hexColor: string, luminance: number): string {
  // Convert hex to RGB
  const r = parseInt(hexColor.slice(1, 3), 16);
  const g = parseInt(hexColor.slice(3, 5), 16);
  const b = parseInt(hexColor.slice(5, 7), 16);
  
  // Convert to HSL for easier luminance adjustment
  const rgbToHsl = (r: number, g: number, b: number) => {
    r /= 255;
    g /= 255;
    b /= 255;
    
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    let h = 0, s = 0, l = (max + min) / 2;
    
    if (max !== min) {
      const d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      
      switch (max) {
        case r: h = (g - b) / d + (g < b ? 6 : 0); break;
        case g: h = (b - r) / d + 2; break;
        case b: h = (r - g) / d + 4; break;
      }
      h /= 6;
    }
    
    return [h, s, l];
  };
  
  const hslToRgb = (h: number, s: number, l: number) => {
    const hue2rgb = (p: number, q: number, t: number) => {
      if (t < 0) t += 1;
      if (t > 1) t -= 1;
      if (t < 1/6) return p + (q - p) * 6 * t;
      if (t < 1/2) return q;
      if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;
      return p;
    };
    
    let r, g, b;
    
    if (s === 0) {
      r = g = b = l;
    } else {
      const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      const p = 2 * l - q;
      r = hue2rgb(p, q, h + 1/3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1/3);
    }
    
    return [
      Math.round(r * 255),
      Math.round(g * 255),
      Math.round(b * 255)
    ];
  };
  
  const [h, s, l] = rgbToHsl(r, g, b);
  const [newR, newG, newB] = hslToRgb(h, s, luminance);
  
  return `#${newR.toString(16).padStart(2, '0')}${newG.toString(16).padStart(2, '0')}${newB.toString(16).padStart(2, '0')}`;
}

// Calculate default colors based on title color
const titleColor = poem.data.color?.hex || '#000000';
const backgroundColor = poem.data.backgroundColor || adjustLuminance(titleColor, 0.98);
const textColor = poem.data.textColor || adjustLuminance(titleColor, 0.02);
---

{isPermalink ? (
  <>
    <article class="poem" id={poem.data.id} style={`background-color: ${backgroundColor}; border: 1px solid ${titleColor}20;`}>
      <h2 style={`color: ${titleColor};${poem.data.titleFont ? ` font-family: ${poem.data.titleFont};` : ''}`}>
        <span set:html={poem.data.title}></span>
      </h2>
      <pre class="stanzas" style={`color: ${textColor};`}><Content /></pre>
    </article>
    <div class="metadata-table" style={`color: ${textColor};`}>
      <table>
        <tbody>
          <tr>
            <td>color</td>
            <td>
              {poem.data.color ? (
                <a href={poem.data.color.link} target="_blank" rel="noopener noreferrer" style={`color: ${poem.data.color.hex}; display: inline-flex; align-items: center; gap: 0.5rem;`}>
                  <span style={`display: inline-block; width: 0.75rem; height: 0.75rem; background-color: ${poem.data.color.hex}; border-radius: 50%; border: 1px solid ${poem.data.color.hex}40;`}></span>
                  {poem.data.color.name}
                </a>
              ) : 'Unknown'}
            </td>
          </tr>
          {poem.data.felt && (
            <tr>
              <td>felt</td>
              <td>
                <time datetime={new Date(poem.data.felt).toISOString()}>
                  {new Date(poem.data.felt).toISOString().split('T')[0]}
                </time>
              </td>
            </tr>
          )}
          <tr>
            <td>wrote</td>
            <td>
              {poem.data.written ? (
                <time datetime={new Date(poem.data.written).toISOString()}>
                  {new Date(poem.data.written).toISOString().split('T')[0]}
                </time>
              ) : 'Unknown'}
            </td>
          </tr>
          <tr>
            <td>posted</td>
            <td>
              {poem.data.published ? (
                <time datetime={new Date(poem.data.published).toISOString()}>
                  {new Date(poem.data.published).toISOString().split('T')[0]}
                </time>
              ) : 'Unknown'}
            </td>
          </tr>
          {poem.data.publications && poem.data.publications.length > 0 && (
            <tr>
              <td>published</td>
              <td>
                <ul style="margin: 0; padding: 0; list-style: none;">
                  {poem.data.publications.map((publication: any) => (
                    <li style="margin-bottom: 0.5rem;">
                      <a href={publication.link} target="_blank" rel="noopener noreferrer">
                        {publication.title}
                      </a>
                      <br />
                      <time datetime={new Date(publication.date).toISOString()} style="font-size: 0.875rem; opacity: 0.8;">
                        {new Date(publication.date).toISOString().split('T')[0]}
                      </time>
                    </li>
                  ))}
                </ul>
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  </>
) : (
  <a href={`/${poem.slug}`} class="poem-link" style={`color: inherit; display: block;`}>
    <article class="poem" id={poem.data.id} style={`background-color: ${backgroundColor}; border: 1px solid ${titleColor}20; --shadow-color: ${titleColor}1a;`}>
      <h2 style={`color: ${titleColor};${poem.data.titleFont ? ` font-family: ${poem.data.titleFont};` : ''}`}>
        <span set:html={poem.data.title}></span>
      </h2>
      <pre class="stanzas" style={`color: ${textColor};`}><Content /></pre>
    </article>
  </a>
)}

<style>
  .poem {
    border-radius: 2rem;
    text-align: left;
    width: 24rem;
    padding: 1.5rem;
    margin-block-end: 2rem;
    transition: box-shadow 0.2s ease-in-out;
  }
  
  .poem h2 {
    font-family: 'Lacrima Serif Bold', serif;
    line-height: 1.2;
    hanging-punctuation: first;
    margin-block-end: 1rem;
  }
  
  .poem-link {
    display: block;
    text-decoration: none;
    transition: transform 0.2s ease-in-out;
  }
  
  .poem-link:hover {
    transform: translateY(-0.2rem);
    box-shadow: none;
  }
  
  .poem-link:hover .poem {
    box-shadow: 0 0.2rem 0.8rem var(--shadow-color);
    border-radius: 2rem;
  }
  
  .poem h2 .title-link {
    display: block;
    text-decoration: none;
  }
  
  .metadata-table {
    padding-block-end: 2rem;
    margin-left: auto;
    margin-right: auto;
  }
  
  .metadata-table table {
    margin-left: auto;
    margin-right: auto;
    border-collapse: collapse;
  }
  
  .metadata-table td {
    padding: 0.25rem 0;
    vertical-align: top;
  }
  
  .metadata-table td:first-child {
    font-family: 'Lacrima Serif Bold', serif;
    padding-inline-end: 2rem;
  }
</style> 