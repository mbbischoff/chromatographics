---
import type { CollectionEntry } from 'astro:content';
import { adjustLuminance } from '../utils/colors';

export interface Props {
  poem: CollectionEntry<'poems'>;
  isPermalink?: boolean;
}

const { poem, isPermalink = false } = Astro.props;
const { Content } = await poem.render();

// Calculate default colors based on title color
const baseTitleColor = poem.data.color?.hex || '#000000';
const titleColor = poem.data.titleColor || baseTitleColor;
const backgroundColor = poem.data.backgroundColor || adjustLuminance(baseTitleColor, 0.98);
const textColor = poem.data.textColor || adjustLuminance(baseTitleColor, 0.02);
const darkModeTextColor = adjustLuminance(baseTitleColor, 0.7);
---

{isPermalink ? (
  <>
    <article class="poem" id={poem.data.id} style={`background-color: ${backgroundColor}; border: 1px solid ${titleColor}20; --poem-title-color: ${titleColor}; --poem-dark-text-color: ${darkModeTextColor};`}>
      <h2 class="poem-title" style={`color: ${titleColor};${poem.data.titleFont ? ` font-family: ${poem.data.titleFont};` : ''}${poem.data.titleFontMultiplier ? ` font-size: ${poem.data.titleFontMultiplier}em;` : ''}`}>
        <span set:html={poem.data.title}></span>
      </h2>
      {poem.data.preformatted ? (
        <pre class="stanzas" style={`color: ${textColor};${poem.data.textFont ? ` font-family: ${poem.data.textFont};` : ''}${poem.data.textFontMultiplier ? ` font-size: ${poem.data.textFontMultiplier}em;` : ''}`}><Content /></pre>
      ) : (
        <div class="stanzas" style={`color: ${textColor};${poem.data.textFont ? ` font-family: ${poem.data.textFont};` : ''}${poem.data.textFontMultiplier ? ` font-size: ${poem.data.textFontMultiplier}em;` : ''}`}><Content /></div>
      )}
    </article>
    <div class="metadata-table">
      <table>
        <tbody>
          <tr class="color-row">
            <td>color</td>
            <td>
              {poem.data.color ? (
                <a href={poem.data.color.link} target="_blank" rel="noopener noreferrer" style={`color: ${poem.data.color.hex}; display: inline-flex; align-items: center; gap: 0.5rem;`}>
                  <span style={`display: inline-block; width: 0.75rem; height: 0.75rem; background-color: ${poem.data.color.hex}; border-radius: 50%; border: 1px solid ${poem.data.color.hex}40;`}></span>
                  {poem.data.color.name}
                </a>
              ) : 'Unknown'}
            </td>
          </tr>
          {poem.data.felt && (
            <tr>
              <td>felt</td>
              <td>
                <time datetime={new Date(poem.data.felt).toISOString()}>
                  {new Date(poem.data.felt).toISOString().split('T')[0]}
                </time>
              </td>
            </tr>
          )}
          <tr>
            <td>wrote</td>
            <td>
              {poem.data.written ? (
                <time datetime={new Date(poem.data.written).toISOString()}>
                  {new Date(poem.data.written).toISOString().split('T')[0]}
                </time>
              ) : 'Unknown'}
            </td>
          </tr>
          <tr>
            <td>posted</td>
            <td>
              {poem.data.published ? (
                <time datetime={new Date(poem.data.published).toISOString()}>
                  {new Date(poem.data.published).toISOString().split('T')[0]}
                </time>
              ) : 'Unknown'}
            </td>
          </tr>
          {poem.data.publications && poem.data.publications.length > 0 && (
            <tr>
              <td>published</td>
              <td>
                <ul style="margin: 0; padding: 0; list-style: none;">
                  {poem.data.publications.map((publication) => (
                    <li style="margin-bottom: 0.5rem;">
                      <a href={publication.link} target="_blank" rel="noopener noreferrer">
                        {publication.title}
                      </a>
                      <br />
                      <time datetime={new Date(publication.date).toISOString()} style="font-size: 0.875rem; opacity: 0.8;">
                        {new Date(publication.date).toISOString().split('T')[0]}
                      </time>
                    </li>
                  ))}
                </ul>
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  </>
) : (
  <a href={`/${poem.slug}`} class="poem-link" style={`color: inherit; display: block;`}>
    <article class="poem" id={poem.data.id} style={`background-color: ${backgroundColor}; border: 1px solid ${titleColor}20; --shadow-color: ${titleColor}1a; --poem-title-color: ${titleColor}; --poem-dark-text-color: ${darkModeTextColor};`}>
      <h2 class="poem-title" style={`color: ${titleColor};${poem.data.titleFont ? ` font-family: ${poem.data.titleFont};` : ''}${poem.data.titleFontMultiplier ? ` font-size: ${poem.data.titleFontMultiplier}em;` : ''}`}>
        <span set:html={poem.data.title}></span>
      </h2>
      {poem.data.preformatted ? (
        <pre class="stanzas" style={`color: ${textColor};${poem.data.textFont ? ` font-family: ${poem.data.textFont};` : ''}${poem.data.textFontMultiplier ? ` font-size: ${poem.data.textFontMultiplier}em;` : ''}`}><Content /></pre>
      ) : (
        <div class="stanzas" style={`color: ${textColor};${poem.data.textFont ? ` font-family: ${poem.data.textFont};` : ''}${poem.data.textFontMultiplier ? ` font-size: ${poem.data.textFontMultiplier}em;` : ''}`}><Content /></div>
      )}
    </article>
  </a>
)}

<style>
  .poem {
    border-radius: 2rem;
    text-align: left;
    width: 29rem;
    padding: 1.5rem;
    margin-block-end: 2rem;
    transition: box-shadow 0.2s ease-in-out;
  }
  
  .poem h2 {
    font-family: 'Lacrima Serif Bold', serif;
    line-height: 1.2;
    hanging-punctuation: first;
    margin-block-end: 1rem;
  }
  
  .poem-link {
    display: block;
    text-decoration: none;
    transition: transform 0.2s ease-in-out;
  }
  
  .poem-link:hover {
    transform: translateY(-0.2rem);
    box-shadow: none;
  }
  
  .poem-link:hover .poem {
    box-shadow: 0 0.2rem 0.8rem var(--shadow-color);
    border-radius: 2rem;
  }
  
  .poem h2 .title-link {
    display: block;
    text-decoration: none;
  }
  
  .metadata-table {
    padding-block-end: 2rem;
    margin-left: auto;
    margin-right: auto;
  }
  
  .metadata-table table {
    margin-left: auto;
    margin-right: auto;
    border-collapse: collapse;
  }
  
  .metadata-table td {
    padding: 0.25rem 0;
    vertical-align: top;
  }
  
  .metadata-table td:first-child {
    font-family: 'Lacrima Serif Bold', serif;
    padding-inline-end: 2rem;
  }

  .metadata-table a {
    color: var(--color-candy-apple-red);
  }
  
  .metadata-table {
    color: var(--color-text);
  }

  /* Color row specific styling */
  .color-row td {
    color: var(--poem-text-color, var(--color-text));
  }

  .color-row a {
    color: var(--poem-color-hex, var(--color-text));
  }

  .color-row span {
    border: 1px solid var(--poem-color-border, transparent);
  }

  /* Dark mode specific styling for poems */
  @media (prefers-color-scheme: dark) {
    .poem {
      background-color: color-mix(in srgb, var(--poem-title-color, #000000) 10%, transparent) !important;
    }
    
     .poem .stanzas {
      color: var(--poem-dark-text-color, #000000) !important;
    }

    .poem-title {
      color: var(--poem-dark-text-color, #000000) !important;
    }

    /* Dark mode styling for color row */
    .color-row td {
      color: var(--color-text) !important;
    }

    .color-row a {
      color: var(--color-text) !important;
    }

    .color-row span {
      border: 1px solid var(--color-text) !important;
    }
  }
</style> 