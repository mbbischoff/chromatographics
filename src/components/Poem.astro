---
export interface Props {
  poem: any;
  isPermalink?: boolean;
}

const { poem, isPermalink = false } = Astro.props;
const { Content } = await poem.render();

// Utility function to adjust color luminance
function adjustLuminance(hexColor: string, luminance: number): string {
  // Convert hex to RGB
  const r = parseInt(hexColor.slice(1, 3), 16);
  const g = parseInt(hexColor.slice(3, 5), 16);
  const b = parseInt(hexColor.slice(5, 7), 16);
  
  // Convert to HSL for easier luminance adjustment
  const rgbToHsl = (r: number, g: number, b: number) => {
    r /= 255;
    g /= 255;
    b /= 255;
    
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    let h = 0, s = 0, l = (max + min) / 2;
    
    if (max !== min) {
      const d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      
      switch (max) {
        case r: h = (g - b) / d + (g < b ? 6 : 0); break;
        case g: h = (b - r) / d + 2; break;
        case b: h = (r - g) / d + 4; break;
      }
      h /= 6;
    }
    
    return [h, s, l];
  };
  
  const hslToRgb = (h: number, s: number, l: number) => {
    const hue2rgb = (p: number, q: number, t: number) => {
      if (t < 0) t += 1;
      if (t > 1) t -= 1;
      if (t < 1/6) return p + (q - p) * 6 * t;
      if (t < 1/2) return q;
      if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;
      return p;
    };
    
    let r, g, b;
    
    if (s === 0) {
      r = g = b = l;
    } else {
      const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      const p = 2 * l - q;
      r = hue2rgb(p, q, h + 1/3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1/3);
    }
    
    return [
      Math.round(r * 255),
      Math.round(g * 255),
      Math.round(b * 255)
    ];
  };
  
  const [h, s, l] = rgbToHsl(r, g, b);
  const [newR, newG, newB] = hslToRgb(h, s, luminance);
  
  return `#${newR.toString(16).padStart(2, '0')}${newG.toString(16).padStart(2, '0')}${newB.toString(16).padStart(2, '0')}`;
}

// Calculate default colors based on title color
const titleColor = poem.data.titleColor || '#000000';
const backgroundColor = poem.data.backgroundColor || adjustLuminance(titleColor, 0.98);
const textColor = poem.data.textColor || adjustLuminance(titleColor, 0.02);
---

<article class="poem" id={poem.data.id} style={`background-color: ${backgroundColor};`}>
  <h2 style={`color: ${titleColor};`}>
    {isPermalink ? (
      <span set:html={poem.data.title}></span>
    ) : (
      <a href={`/${poem.id}`} class="title-link" style={`color: ${titleColor}; text-decoration: none;`} set:html={poem.data.title}>
      </a>
    )}
  </h2>
  <pre class="stanzas" style={`color: ${textColor};`}>
    <Content />
  </pre>
</article>

<style>
  .poem {
    padding: 2rem;
    border-radius: 8px;
    text-align: left;
    min-width: 20rem;
    margin-block-end: 4rem;
  }
  
  .poem h2 {
    line-height: 1.2;
    font-family: 'Lacrima Serif Bold', serif;
  }
  
  .poem h2 .title-link {
    display: block;
    text-decoration: none;
  }
  
  .stanzas {
    white-space: pre-wrap;
    font-family: inherit;
  }
</style> 