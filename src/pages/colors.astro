---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import { sortPoemsBySpectrum, hexToHsl } from '../utils/colors';
import PageHeader from '../components/PageHeader.astro';

const poems = await getCollection('poems');
const poemsWithColors = poems.filter(poem => poem.data.color?.hex);

// Group poems by color name
const colorGroups = new Map<string, CollectionEntry<'poems'>[]>();
poemsWithColors.forEach(poem => {
  const colorName = poem.data.color!.name;
  if (!colorGroups.has(colorName)) {
    colorGroups.set(colorName, []);
  }
  colorGroups.get(colorName)!.push(poem);
});

// Create color groups and sort them using the existing function
const sortedColorGroups = Array.from(colorGroups.entries())
  .map(([colorName, poems]) => ({
    colorName,
    hex: poems[0].data.color!.hex,
    color: poems[0].data.color!,
    poems: sortPoemsBySpectrum(poems)
  }))
  .sort((a, b) => {
    // Use the existing hexToHsl function for sorting
    const [hueA] = hexToHsl(a.hex);
    const [hueB] = hexToHsl(b.hex);
    const adjustedHueA = hueA > 0.9 ? hueA - 1 : hueA;
    const adjustedHueB = hueB > 0.9 ? hueB - 1 : hueB;
    return adjustedHueA - adjustedHueB;
  });
---

<Layout title="Colors - chromatographics">
  <div class="colors-page">
    <PageHeader title="colors" />

    <table class="colors-table">
      <tbody>
        {sortedColorGroups.map((colorGroup) => (
          <tr>
            <td class="swatch-cell">
              <span class="swatch" style={`background-color: ${colorGroup.hex};`}></span>
            </td>
            <td class="color-name-cell">
              {colorGroup.color.link ? (
                <a href={colorGroup.color.link} class="color-link" target="_blank" rel="noopener noreferrer" style={`color: ${colorGroup.hex};`}>
                  <span class="color-name">{colorGroup.colorName}</span>
                </a>
              ) : (
                <span class="color-name" style={`color: ${colorGroup.hex};`}>{colorGroup.colorName}</span>
              )}
            </td>
            <td class="title-cell">
              {colorGroup.poems.map((poem, index) => (
                <>
                  <a href={`/${poem.slug}`} class="poem-link">
                    <span set:html={poem.data.title}></span>
                  </a>
                  {index < colorGroup.poems.length - 1 && <br />}
                </>
              ))}
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  </div>
</Layout>

<style>
  .colors-page {
    max-width: 24rem;
    margin: 0 auto;
    padding: 0 1rem 1rem;
  }

  .colors-table {
    width: 100%;
    border-collapse: collapse;
  }

  .colors-table tr {
    border-bottom: 1px solid var(--color-border-light);
  }

  .colors-table tr:last-child {
    border-bottom: none;
  }

  .swatch-cell, .title-cell {
    padding: 0.5rem 1rem;
    vertical-align: middle;
  }

  .swatch-cell {
    width: 2.5rem;
    text-align: center;
    vertical-align: middle;
  }

  .color-name-cell {
    padding: 0.5rem;
    vertical-align: middle;
    width: 10em;
    font-size: 0.75rem;
  }

  .color-name {
    font-family: 'Lacrima Serif Bold';
  }

  .color-link {
    text-decoration: none;
    color: inherit;
  }

  .color-link:hover {
    text-decoration: underline;
  }

  .swatch {
    display: inline-block;
    width: 1rem;
    height: 1rem;
    border-radius: 50%;
    border: 1px solid var(--color-swatch-border);
  }

  .poem-link {
    text-decoration: none;
    color: var(--text-color);
    font-weight: bold;
  }

  .poem-link:hover {
    text-decoration: underline;
  }

  /* Dark mode styling for color names */
  @media (prefers-color-scheme: dark) {
    .color-name {
      color: var(--color-text) !important;
    }
    
    .color-link {
      color: var(--color-text) !important;
    }
  }
</style>
